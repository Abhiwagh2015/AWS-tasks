3 tier Architecture :-
====================

security group :-
	- ssh : 22
	- http : 80
	- arrora/mysql : 3306
	- custom tcp : 8080


1. create vpc -10.0.0.0/16 
	-Associate it with IGW

2. Create subnets -
 	- 2 public subnet 
		- pub_1 --> 10.0.0.0/24 --> Az1
		- pub_2 --> 10.0.1.0/24 --> Az2
	- 4 private subnet
		- web_1 --> 10.0.2.0/24 --> Az1
		- web_2 --> 10.0.3.0/24 --> Az2
		- App_1 --> 10.0.4.0/24 --> Az1
		- App_2 --> 10.0.5.0/24 --> Az2

3.create NAT gateway And associate it with pub_2

4.create Route Table
	- public Route table --> Pub_RT
		-Associate all public subnet with pub_RT
	- Private route table --> pvt_RT
		-Associate all private subnet with pvt_RT

5.go to Route table 
	- click on Pub_Rt > Routes > edits 
		- add routes > 0.0.0.0/0 > Add internet gateway
	- click on pvt_RT > Routes > PVt > edits
		- add routes > 0.0.0.0/0 > add Nat gateway [that you created ]

6. launch 3 instance [with following specification]

	jump server --> is also know as bastion host 
 
	web-instance -->user data 
		#!/bin/bash 
		sudo apt update -y
		sudo apt install nginx -y
		sudo systemctl enable nginx 
		sudo systemctl start nginx
	
	App-instance  -->
		#!/bin/bash
		#!/bin/bash
		sudo wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.86/bin/apache-tomcat-8.5.86.tar.gz
		sudo tar -xvzf apache-tomcat-8.5.86.tar.gz
		sudo yum install java-1.8.0-openjdk-src.x86_64 -y
		sudo cd apache-tomcat-8.5.86.tar.gz/webapps/
		sudo curl -O https://s3-us-west-2.amazonaws.com/studentapi-cit/student.war
		sudo cd apache-tomcat-8.5.86.tar.gz/lib/
		sudo curl -O https://s3-us-west-2.amazonaws.com/studentapi-cit/mysql-connector.jar
		sudo cd apache-tomcat-8.5.86.tar.gz/bin/
		sudo ./catalina.sh stop
		sudo ./catalina.sh start


7. Go to RDS > click on create database 
 
8. take ssh 
	copy key from our machine to jump server 
	- # scp -i <key name of Authontication > < file you want to send > ubuntu@<ip address>:/home/ubuntu
	take ssh (BAStion Host)
	- # ssh -i <key name > ubuntu@<jump server ip address>

		-from bastion host take ssh of app-instance
		- # ssh -i <key name > ubuntu@<app instance ip address>

		- # mysql -h < paste database endpoint > -u admin -p 

			-create schema and table in database 
				-CREATE DATABASE studentapp;
				-use studentapp;
				-CREATE TABLE if not exists students(student_id INT NOT NULL AUTO_INCREMENT,
				    student_name VARCHAR(100) NOT NULL,
				    student_addr VARCHAR(100) NOT NULL,
				    student_age VARCHAR(3) NOT NULL,
				    student_qual VARCHAR(20) NOT NULL,
				    student_percent VARCHAR(10) NOT NULL,
				    student_year_passed VARCHAR(10) NOT NULL,
				    PRIMARY KEY (student_id)
				 );	
				-describe students;
				-exit		
			
			- # vim apache-tomcat-8.5.86.tar.gz/conf/context.xml
				-<Resource name="jdbc/TestDB" auth="Container" type="javax.sql.DataSource"
			        maxTotal="500" maxIdle="30" maxWaitMillis="1000"
          			  username="admin" password="Admin$123" driverClassName="com.mysql.jdbc.Driver"
          			  url="jdbc:mysql://< paste database endpoint >:3306/< Database name >"/>
 
			- # sudo ./catalina.sh stop
			- # sudo ./catalina.sh start

		-from bastion host take ssh of web-instance
		- # ssh -i <key name > ubuntu@< web instance ip address>

			- # cd /usr/share/nginx/html
				- sudo curl -O https://s3-us-west-2.amazonaws.com/studentapi-cit/index.html 
			
			- vim /etc/nginx/conf.d/proxy.conf
				-  server {
        				listen  80;
				        listen [::]:80;
				        server_name  _;
				        location / {
					        proxy_pass http://internal-tomcatlb-11803762.us-east-1.elb.amazonaws.com/student/;
				        }
					}

		- # sudo systemctl restart nginx

9. create an Ami from running instances 
	- App Ami ---> App_Ami
	- Web Ami ---> web_Ami
10. create a template with App_Ami And Web_Ami
	- Web_ template 
	- App_template [with userdata]
		- sudo ./apache-tomcat-8.5.86.tar.gz/bin/startup.sh

11. create Autoscalling group 
	- web_AG --> associate Web_template 
		- select vpc 
		- select 2 Az
	- App_AG --> associate App_template 
		- select vpc
		- select 2 Az 

12. create LoadBalancer 
	- Front_End load balancer ( internet facing )
		-create target group ---> web_TG 
			- select instances
			- http : 80
			- source --> /
			- select web instances  and Associate it with TG
		
	- Back_End load balancer ( internal facing )
		-create target group ---> App_TG 
			- select instances
			- http : 80
			- source --> /
			- select App instances  and Associate it with TG

13. hit the dns of load balancer .











